$(document).ready(function(){


    // https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e/108895657503177547807713615587106130920312718766249665638523948010864721788929
    // const options = {method: 'GET'};

    // fetch('https://api.opensea.io/api/v1/asset/0x495f947276749ce646f68ac8c248420045cb7b5e/108895657503177547807713615587106130920312718766249665638523948010864721788929/', options)
    //   .then(response => console.log(response.json()))
    //   .then(data =>console.log(data))
    //   .catch(err => console.error(err));
    const openseaBaseURL = "https://opensea.io/assets/0x495f947276749ce646f68ac8c248420045cb7b5e";
    const openseaURLs={
        1: "108895657503177547807713615587106130920312718766249665638523947906411117150209",
        2: "108895657503177547807713615587106130920312718766249665638523947907510628777985",
        3: "108895657503177547807713615587106130920312718766249665638523947908610140405761",
        4: "108895657503177547807713615587106130920312718766249665638523947909709652033537",
        5: "108895657503177547807713615587106130920312718766249665638523947910809163661313",
        6: "108895657503177547807713615587106130920312718766249665638523947911908675289089",
        7: "108895657503177547807713615587106130920312718766249665638523947913008186916865",
        8: "108895657503177547807713615587106130920312718766249665638523947914107698544641",
        9: "108895657503177547807713615587106130920312718766249665638523947915207210172417",
        10: "108895657503177547807713615587106130920312718766249665638523947916306721800193",
        11: "108895657503177547807713615587106130920312718766249665638523947917406233427969",
        12: "108895657503177547807713615587106130920312718766249665638523947918505745055745",
        13: "108895657503177547807713615587106130920312718766249665638523947919605256683521",
        14: "108895657503177547807713615587106130920312718766249665638523947920704768311297",
        15: "108895657503177547807713615587106130920312718766249665638523947921804279939073",
        16: "108895657503177547807713615587106130920312718766249665638523947922903791566849",
        17: "108895657503177547807713615587106130920312718766249665638523947924003303194625",
        18: "108895657503177547807713615587106130920312718766249665638523947925102814822401",
        19: "108895657503177547807713615587106130920312718766249665638523947926202326450177",
        20: "108895657503177547807713615587106130920312718766249665638523947927301838077953",
        21: "108895657503177547807713615587106130920312718766249665638523947928401349705729",
        22: "108895657503177547807713615587106130920312718766249665638523947929500861333505",
        23: "108895657503177547807713615587106130920312718766249665638523947930600372961281",
        24: "108895657503177547807713615587106130920312718766249665638523947931699884589057",
        25: "108895657503177547807713615587106130920312718766249665638523947932799396216833",
        26: "108895657503177547807713615587106130920312718766249665638523947933898907844609",
        27: "108895657503177547807713615587106130920312718766249665638523947934998419472385",
        28: "108895657503177547807713615587106130920312718766249665638523947936097931100161",
        29: "108895657503177547807713615587106130920312718766249665638523947937197442727937",
        30: "108895657503177547807713615587106130920312718766249665638523947938296954355713",
        31: "108895657503177547807713615587106130920312718766249665638523947939396465983489",
        32: "108895657503177547807713615587106130920312718766249665638523947940495977611265",
        33: "108895657503177547807713615587106130920312718766249665638523947941595489239041",
        34: "108895657503177547807713615587106130920312718766249665638523947942695000866817",
        35: "108895657503177547807713615587106130920312718766249665638523947943794512494593",
        36: "108895657503177547807713615587106130920312718766249665638523947944894024122369",
        37: "108895657503177547807713615587106130920312718766249665638523947945993535750145",
        38: "108895657503177547807713615587106130920312718766249665638523947947093047377921",
        39: "108895657503177547807713615587106130920312718766249665638523947948192559005697",
        40: "108895657503177547807713615587106130920312718766249665638523947949292070633473",
        41: "108895657503177547807713615587106130920312718766249665638523947950391582261249",
        42: "108895657503177547807713615587106130920312718766249665638523947951491093889025",
        43: "108895657503177547807713615587106130920312718766249665638523947952590605516801",
        44: "108895657503177547807713615587106130920312718766249665638523947953690117144577",
        45: "108895657503177547807713615587106130920312718766249665638523947954789628772353",
        46: "108895657503177547807713615587106130920312718766249665638523947955889140400129",
        47: "108895657503177547807713615587106130920312718766249665638523947956988652027905",
        48: "108895657503177547807713615587106130920312718766249665638523947958088163655681",
        49: "108895657503177547807713615587106130920312718766249665638523947959187675283457",
        50: "108895657503177547807713615587106130920312718766249665638523947960287186911233",
        51: "108895657503177547807713615587106130920312718766249665638523947961386698539009",
        52: "108895657503177547807713615587106130920312718766249665638523947962486210166785",
        53: "108895657503177547807713615587106130920312718766249665638523947963585721794561",
        54: "108895657503177547807713615587106130920312718766249665638523947964685233422337",
        55: "108895657503177547807713615587106130920312718766249665638523947965784745050113",
        56: "108895657503177547807713615587106130920312718766249665638523947966884256677889",
        57: "108895657503177547807713615587106130920312718766249665638523947967983768305665",
        58: "108895657503177547807713615587106130920312718766249665638523947969083279933441",
        59: "108895657503177547807713615587106130920312718766249665638523947970182791561217",
        60: "108895657503177547807713615587106130920312718766249665638523947971282303188993",
        61: "108895657503177547807713615587106130920312718766249665638523947972381814816769",
        62: "108895657503177547807713615587106130920312718766249665638523947973481326444545",
        63: "108895657503177547807713615587106130920312718766249665638523947974580838072321",
        64: "108895657503177547807713615587106130920312718766249665638523947975680349700097",
        65: "108895657503177547807713615587106130920312718766249665638523947976779861327873",
        66: "108895657503177547807713615587106130920312718766249665638523947977879372955649",
        67: "108895657503177547807713615587106130920312718766249665638523947978978884583425",
        68: "108895657503177547807713615587106130920312718766249665638523947980078396211201",
        69: "108895657503177547807713615587106130920312718766249665638523947981177907838977",
        70: "108895657503177547807713615587106130920312718766249665638523947982277419466753",
        71: "108895657503177547807713615587106130920312718766249665638523947983376931094529",
        72: "108895657503177547807713615587106130920312718766249665638523947984476442722305",
        73: "108895657503177547807713615587106130920312718766249665638523947985575954350081",
        74: "108895657503177547807713615587106130920312718766249665638523947986675465977857",
        75: "108895657503177547807713615587106130920312718766249665638523947987774977605633",
        76: "108895657503177547807713615587106130920312718766249665638523947988874489233409",
        77: "108895657503177547807713615587106130920312718766249665638523947989974000861185",
        78: "108895657503177547807713615587106130920312718766249665638523947991073512488961",
        79: "108895657503177547807713615587106130920312718766249665638523947992173024116737",
        80: "108895657503177547807713615587106130920312718766249665638523947993272535744513",
        81: "108895657503177547807713615587106130920312718766249665638523947994372047372289",
        82: "108895657503177547807713615587106130920312718766249665638523947995471559000065",
        83: "108895657503177547807713615587106130920312718766249665638523947996571070627841",
        84: "108895657503177547807713615587106130920312718766249665638523947997670582255617",
        85: "108895657503177547807713615587106130920312718766249665638523947998770093883393",
        86: "108895657503177547807713615587106130920312718766249665638523947999869605511169",
        87: "108895657503177547807713615587106130920312718766249665638523948000969117138945",
        88: "108895657503177547807713615587106130920312718766249665638523948002068628766721",
        89: "108895657503177547807713615587106130920312718766249665638523948003168140394497",
        90: "108895657503177547807713615587106130920312718766249665638523948004267652022273",
        91: "108895657503177547807713615587106130920312718766249665638523948005367163650049",
        92: "108895657503177547807713615587106130920312718766249665638523948006466675277825",
        93: "108895657503177547807713615587106130920312718766249665638523948007566186905601",
        94: "108895657503177547807713615587106130920312718766249665638523948008665698533377",
        95: "108895657503177547807713615587106130920312718766249665638523948009765210161153",
        96: "108895657503177547807713615587106130920312718766249665638523948010864721788929",
        97: "108895657503177547807713615587106130920312718766249665638523948011964233416705",
        98: "108895657503177547807713615587106130920312718766249665638523948013063745044481",
        99: "108895657503177547807713615587106130920312718766249665638523948014163256672257",
        100: "108895657503177547807713615587106130920312718766249665638523948015262768300033",
    }
    let j=1;
    let group='';
    const punksCount = 100;
    let punksIterated=0;
    let punksLoaded = 0;
    let carouselReady = false;
    let imagesReady = false;
    let allinitialized = false;
    function preloadImages(){
        for (let index = 1; index < punksCount; index++) {
            var img=new Image();
            const url = 'images/punk_'+index+'.jpg';
            img.src=url;
            img.onload = function(){
                punksLoaded++;
                if (punksLoaded>=punksCount-1) {
                    imagesReady = true;
                    if(imagesReady && carouselReady){
                        $('.loader').removeClass('active');
                        $('.loaded-content').addClass('active');
                        setTimeout(function(){
                            $('.loader').addClass('hide');
                        },200)
                    }
                    
                }
            }
            
        }
    }
    preloadImages();
    AOS.init();

    let statsPlayed = false;
    window.setTimeout(function(){

        document.addEventListener('aos:in:stats-counter', ({ detail }) => {
            if(!statsPlayed){
                console.log('play stats!');
                statsPlayed=true;
                $('.counter').each(function () {
                    $(this).prop('Counter',0).animate({
                        Counter: $(this).text()
                    }, {
                        duration: 5000,
                        easing: 'swing',
                        step: function (now) {
                            $(this).text(Math.ceil(now));
                        }
                    });
                });
            }
        });
    },500);


    //fallback to disable preloader if something breaks.
    setTimeout(function(){
        console.log('fallback');
        $('.loader').removeClass('active');
        $('.loaded-content').addClass('active');
        setTimeout(function(){
            $('.loader').addClass('hide');
        },200)
    },15000)
    for (let index = 0; index < Math.floor(punksCount/2); index++) {
        j=1;
        group="";
        group+="<div class='group'>";
        while (j<=2 && punksIterated<punksCount) {
            j++;
            punksIterated++;
            if(j==2 && punksIterated==punksCount){
                break;
            }
            group+="<div class='punk'>";
            const punkURL = openseaURLs ? openseaBaseURL+"/"+openseaURLs[punksIterated] : "https://opensea.io/collection/3dpunks";
            if(punksIterated<10){
                group+="<img src='../images/punk_"+punksIterated+".jpg' alt='Punk #00"+punksIterated+"'/>";
                group+="<div class='name-background'><span class='name'>3DPunks #00"+punksIterated+"</span><a target='_blank' href='"+punkURL+"'>Opensea</a></div>"
            }else{
                group+="<img src='../images/punk_"+punksIterated+".jpg' alt='Punk #0"+punksIterated+"'/>";
                group+="<div class='name-background'><span class='name'>3DPunks #0"+punksIterated+"</span><a target='_blank' href='"+punkURL+"'>Opensea</a></div>";
            } 
            group+="</div>";

        }
        group+="</div>"
        $('#punks-carousel').append(group);
        
    }
    
    //hover works bad on mobile, changing to onClick.
    if(window.innerWidth<=1024){
        // console.log('mobile, screen <1024');
        $(document).on('click','.punk',function(){
            $('.punk').removeClass('active');
            $('.punk .name-background a').removeClass('clickable');
            const obj = $(this);

            setTimeout(function(){
                obj.find('a').addClass('clickable');
            },200)
            $(this).addClass('active');
        })
    }
    setTimeout(function(){

        $("#punks-carousel").owlCarousel({
            margin:0,
            responsive:{
                0:{
                    items:2,
                },
                600:{
                    items:5,
                },
                769:{
                    items:7,
                },
                1025:{
                    items:10,
                }
            },
            loop: true,
            lazyLoad : true,
            autoplay: true,
            autoplayTimeout:3000,
            autoplayHoverPause:true,
            onInitialized: fixOwl,
            onRefreshed: fixOwl
        });

    },10)
    var fixOwl = function(){
        var $stage = $('.owl-stage'),
            stageW = $stage.width(),
            $el = $('.owl-item'),
            elW = 0;
        $el.each(function() {
            elW += $(this).width()+ +($(this).css("margin-right").slice(0, -2))
        });
        if ( elW > stageW ) {
            $stage.width( elW );
        };
        AOS.refresh();
        if(!allinitialized){
            carouselReady=true;
            allinitialized = true;
            setTimeout(function(){
                console.log('ready');
                if(imagesReady && carouselReady){
                    $('.loader').removeClass('active');
                    $('.loaded-content').addClass('active');
                    setTimeout(function(){
                        $('.loader').addClass('hide');
                    },200)
                }
            },500)
        }
        
    }



    $.fn.shuffleChildren = function() {
        $.each(this.get(), function(index, el) {
            var $el = $(el);
            var $find = $el.children();
    
            $find.sort(function() {
                return 0.5 - Math.random();
            });
    
            $el.empty();
            $find.appendTo($el);
        });
    };
  });